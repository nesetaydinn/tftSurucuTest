
tftSurucuTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8bc  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d648  0800d648  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800d648  0800d648  0001d648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d650  0800d650  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d650  0800d650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d654  0800d654  0001d654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800d658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000024  0800d67c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800d67c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ecd  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001377  00000000  00000000  00026f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  00028298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  00028958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f4e0  00000000  00000000  00028f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005cc8  00000000  00000000  00048438  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bddd5  00000000  00000000  0004e100  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010bed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a34  00000000  00000000  0010bf50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d74 	.word	0x08002d74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08002d74 	.word	0x08002d74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f9cc 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80a 	bl	80004e8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8a8 	bl	8000628 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d8:	f000 f870 	bl	80005bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7789_Init();
 80004dc:	f001 fc44 	bl	8001d68 <ST7789_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ST7789_Test();
 80004e0:	f002 fa6e 	bl	80029c0 <ST7789_Test>
 80004e4:	e7fc      	b.n	80004e0 <main+0x18>
	...

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	; 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fc34 	bl	8002d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <SystemClock_Config+0xd0>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	2310      	movs	r3, #16
 800054e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000554:	2300      	movs	r3, #0
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000558:	2308      	movs	r3, #8
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800055c:	23a8      	movs	r3, #168	; 0xa8
 800055e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fca9 	bl	8000ec4 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000578:	f000 f898 	bl	80006ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2302      	movs	r3, #2
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800058e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2105      	movs	r1, #5
 800059a:	4618      	mov	r0, r3
 800059c:	f000 ff02 	bl	80013a4 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005a6:	f000 f881 	bl	80006ac <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_SPI1_Init+0x64>)
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <MX_SPI1_Init+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_SPI1_Init+0x64>)
 80005c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_SPI1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_SPI1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_SPI1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_SPI1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_SPI1_Init+0x64>)
 80005e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_SPI1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_SPI1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_SPI1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_SPI1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_SPI1_Init+0x64>)
 8000608:	220a      	movs	r2, #10
 800060a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_SPI1_Init+0x64>)
 800060e:	f001 f861 	bl	80016d4 <HAL_SPI_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000618:	f000 f848 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000040 	.word	0x20000040
 8000624:	40013000 	.word	0x40013000

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_GPIO_Init+0x7c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <MX_GPIO_Init+0x7c>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_GPIO_Init+0x7c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_GPIO_Init+0x7c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <MX_GPIO_Init+0x7c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_GPIO_Init+0x7c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	211a      	movs	r1, #26
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <MX_GPIO_Init+0x80>)
 800067c:	f000 fc08 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin;
 8000680:	231a      	movs	r3, #26
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_GPIO_Init+0x80>)
 8000698:	f000 fa60 	bl	8000b5c <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <Error_Handler+0x6>

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_MspInit+0x4c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a19      	ldr	r2, [pc, #100]	; (8000788 <HAL_SPI_MspInit+0x84>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d12b      	bne.n	800077e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_SPI_MspInit+0x88>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <HAL_SPI_MspInit+0x88>)
 8000730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_SPI_MspInit+0x88>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_SPI_MspInit+0x88>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <HAL_SPI_MspInit+0x88>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_SPI_MspInit+0x88>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800076e:	2305      	movs	r3, #5
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <HAL_SPI_MspInit+0x8c>)
 800077a:	f000 f9ef 	bl	8000b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40013000 	.word	0x40013000
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f894 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <SystemInit+0x28>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <SystemInit+0x28>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SystemInit+0x28>)
 80007fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000802:	609a      	str	r2, [r3, #8]
#endif
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr  r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800083e:	f7ff ffd3 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f002 fa6b 	bl	8002d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fe3f 	bl	80004c8 <main>
  bx  lr    
 800084a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800084c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000850:	0800d658 	.word	0x0800d658
  ldr  r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000858:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 800085c:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000860:	2000009c 	.word	0x2000009c

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_Init+0x40>)
 8000872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_Init+0x40>)
 800087e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_Init+0x40>)
 800088a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f92f 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff ff0a 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023c00 	.word	0x40023c00

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f939 	bl	8000b42 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e8:	f000 f90f 	bl	8000b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20000098 	.word	0x20000098

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000098 	.word	0x20000098

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_Delay+0x40>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000008 	.word	0x20000008

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	f7ff ff8e 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff47 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff5c 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ff8e 	bl	8000a48 <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff5d 	bl	80009f4 <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffb0 	bl	8000ab0 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	e16b      	b.n	8000e50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b78:	2201      	movs	r2, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f040 815a 	bne.w	8000e4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d00b      	beq.n	8000bb6 <HAL_GPIO_Init+0x5a>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d007      	beq.n	8000bb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000baa:	2b11      	cmp	r3, #17
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d130      	bne.n	8000c18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bec:	2201      	movs	r2, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	091b      	lsrs	r3, r3, #4
 8000c02:	f003 0201 	and.w	r2, r3, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0xfc>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b12      	cmp	r3, #18
 8000c56:	d123      	bne.n	8000ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	69b9      	ldr	r1, [r7, #24]
 8000c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0203 	and.w	r2, r3, #3
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 80b4 	beq.w	8000e4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b5f      	ldr	r3, [pc, #380]	; (8000e64 <HAL_GPIO_Init+0x308>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a5e      	ldr	r2, [pc, #376]	; (8000e64 <HAL_GPIO_Init+0x308>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b5c      	ldr	r3, [pc, #368]	; (8000e64 <HAL_GPIO_Init+0x308>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cfe:	4a5a      	ldr	r2, [pc, #360]	; (8000e68 <HAL_GPIO_Init+0x30c>)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	3302      	adds	r3, #2
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a51      	ldr	r2, [pc, #324]	; (8000e6c <HAL_GPIO_Init+0x310>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d02b      	beq.n	8000d82 <HAL_GPIO_Init+0x226>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a50      	ldr	r2, [pc, #320]	; (8000e70 <HAL_GPIO_Init+0x314>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d025      	beq.n	8000d7e <HAL_GPIO_Init+0x222>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <HAL_GPIO_Init+0x318>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d01f      	beq.n	8000d7a <HAL_GPIO_Init+0x21e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_GPIO_Init+0x31c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d019      	beq.n	8000d76 <HAL_GPIO_Init+0x21a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4d      	ldr	r2, [pc, #308]	; (8000e7c <HAL_GPIO_Init+0x320>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d013      	beq.n	8000d72 <HAL_GPIO_Init+0x216>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <HAL_GPIO_Init+0x324>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00d      	beq.n	8000d6e <HAL_GPIO_Init+0x212>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_GPIO_Init+0x328>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x20e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4a      	ldr	r2, [pc, #296]	; (8000e88 <HAL_GPIO_Init+0x32c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_GPIO_Init+0x20a>
 8000d62:	2307      	movs	r3, #7
 8000d64:	e00e      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d66:	2308      	movs	r3, #8
 8000d68:	e00c      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	e00a      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d6e:	2305      	movs	r3, #5
 8000d70:	e008      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x228>
 8000d82:	2300      	movs	r3, #0
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d94:	4934      	ldr	r1, [pc, #208]	; (8000e68 <HAL_GPIO_Init+0x30c>)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc6:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df0:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e44:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	f67f ae90 	bls.w	8000b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3724      	adds	r7, #36	; 0x24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020c00 	.word	0x40020c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40021400 	.word	0x40021400
 8000e84:	40021800 	.word	0x40021800
 8000e88:	40021c00 	.word	0x40021c00
 8000e8c:	40013c00 	.word	0x40013c00

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e25b      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d075      	beq.n	8000fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee2:	4ba3      	ldr	r3, [pc, #652]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d00c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eee:	4ba0      	ldr	r3, [pc, #640]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d112      	bne.n	8000f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efa:	4b9d      	ldr	r3, [pc, #628]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f06:	d10b      	bne.n	8000f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4b99      	ldr	r3, [pc, #612]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d05b      	beq.n	8000fcc <HAL_RCC_OscConfig+0x108>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d157      	bne.n	8000fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e236      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d106      	bne.n	8000f38 <HAL_RCC_OscConfig+0x74>
 8000f2a:	4b91      	ldr	r3, [pc, #580]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a90      	ldr	r2, [pc, #576]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e01d      	b.n	8000f74 <HAL_RCC_OscConfig+0xb0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x98>
 8000f42:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a8a      	ldr	r2, [pc, #552]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b88      	ldr	r3, [pc, #544]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a87      	ldr	r2, [pc, #540]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0xb0>
 8000f5c:	4b84      	ldr	r3, [pc, #528]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a83      	ldr	r2, [pc, #524]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b81      	ldr	r3, [pc, #516]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a80      	ldr	r2, [pc, #512]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcda 	bl	8000934 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fcd6 	bl	8000934 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e1fb      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	4b76      	ldr	r3, [pc, #472]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0xc0>
 8000fa2:	e014      	b.n	8000fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcc6 	bl	8000934 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fcc2 	bl	8000934 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1e7      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	4b6c      	ldr	r3, [pc, #432]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0xe8>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d063      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fda:	4b65      	ldr	r3, [pc, #404]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d11c      	bne.n	800102c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x152>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d001      	beq.n	8001016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e1bb      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b56      	ldr	r3, [pc, #344]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4952      	ldr	r1, [pc, #328]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	e03a      	b.n	80010a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b4f      	ldr	r3, [pc, #316]	; (8001174 <HAL_RCC_OscConfig+0x2b0>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103a:	f7ff fc7b 	bl	8000934 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fc77 	bl	8000934 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e19c      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b43      	ldr	r3, [pc, #268]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4940      	ldr	r1, [pc, #256]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <HAL_RCC_OscConfig+0x2b0>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fc5a 	bl	8000934 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fc56 	bl	8000934 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e17b      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d030      	beq.n	8001110 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d016      	beq.n	80010e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_RCC_OscConfig+0x2b4>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc3a 	bl	8000934 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc36 	bl	8000934 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e15b      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x200>
 80010e2:	e015      	b.n	8001110 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_RCC_OscConfig+0x2b4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fc23 	bl	8000934 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f2:	f7ff fc1f 	bl	8000934 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e144      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a0 	beq.w	800125e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10f      	bne.n	800114e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	; 0x40
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_OscConfig+0x2b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d121      	bne.n	800119e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_RCC_OscConfig+0x2b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_RCC_OscConfig+0x2b8>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001166:	f7ff fbe5 	bl	8000934 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	e011      	b.n	8001192 <HAL_RCC_OscConfig+0x2ce>
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	42470000 	.word	0x42470000
 8001178:	42470e80 	.word	0x42470e80
 800117c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001180:	f7ff fbd8 	bl	8000934 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e0fd      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001192:	4b81      	ldr	r3, [pc, #516]	; (8001398 <HAL_RCC_OscConfig+0x4d4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2f0>
 80011a6:	4b7d      	ldr	r3, [pc, #500]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011aa:	4a7c      	ldr	r2, [pc, #496]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6713      	str	r3, [r2, #112]	; 0x70
 80011b2:	e01c      	b.n	80011ee <HAL_RCC_OscConfig+0x32a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x312>
 80011bc:	4b77      	ldr	r3, [pc, #476]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c0:	4a76      	ldr	r2, [pc, #472]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6713      	str	r3, [r2, #112]	; 0x70
 80011c8:	4b74      	ldr	r3, [pc, #464]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011cc:	4a73      	ldr	r2, [pc, #460]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6713      	str	r3, [r2, #112]	; 0x70
 80011d4:	e00b      	b.n	80011ee <HAL_RCC_OscConfig+0x32a>
 80011d6:	4b71      	ldr	r3, [pc, #452]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	4a70      	ldr	r2, [pc, #448]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6713      	str	r3, [r2, #112]	; 0x70
 80011e2:	4b6e      	ldr	r3, [pc, #440]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e6:	4a6d      	ldr	r2, [pc, #436]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d015      	beq.n	8001222 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb9d 	bl	8000934 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fb99 	bl	8000934 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e0bc      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	4b61      	ldr	r3, [pc, #388]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 8001216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ee      	beq.n	80011fe <HAL_RCC_OscConfig+0x33a>
 8001220:	e014      	b.n	800124c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff fb87 	bl	8000934 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fb83 	bl	8000934 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e0a6      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1ee      	bne.n	800122a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 8001258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8092 	beq.w	800138c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d05c      	beq.n	800132e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d141      	bne.n	8001300 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127c:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <HAL_RCC_OscConfig+0x4dc>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fb57 	bl	8000934 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fb53 	bl	8000934 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e078      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69da      	ldr	r2, [r3, #28]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	019b      	lsls	r3, r3, #6
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	041b      	lsls	r3, r3, #16
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	061b      	lsls	r3, r3, #24
 80012cc:	4933      	ldr	r1, [pc, #204]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <HAL_RCC_OscConfig+0x4dc>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fb2c 	bl	8000934 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e0:	f7ff fb28 	bl	8000934 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e04d      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x41c>
 80012fe:	e045      	b.n	800138c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <HAL_RCC_OscConfig+0x4dc>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb15 	bl	8000934 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fb11 	bl	8000934 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e036      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x44a>
 800132c:	e02e      	b.n	800138c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e029      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_RCC_OscConfig+0x4d8>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	429a      	cmp	r2, r3
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d115      	bne.n	8001388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001362:	4013      	ands	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001368:	4293      	cmp	r3, r2
 800136a:	d10d      	bne.n	8001388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d106      	bne.n	8001388 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40007000 	.word	0x40007000
 800139c:	40023800 	.word	0x40023800
 80013a0:	42470060 	.word	0x42470060

080013a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0cc      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d90c      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800141a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d044      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d119      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d003      	beq.n	8001462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145e:	2b03      	cmp	r3, #3
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e06f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e067      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f023 0203 	bic.w	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4934      	ldr	r1, [pc, #208]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001494:	f7ff fa4e 	bl	8000934 <HAL_GetTick>
 8001498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149c:	f7ff fa4a 	bl	8000934 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e04f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 020c 	and.w	r2, r3, #12
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1eb      	bne.n	800149c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d20c      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f821 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800152e:	4601      	mov	r1, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	fa21 f303 	lsr.w	r3, r1, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f9ae 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00
 8001560:	40023800 	.word	0x40023800
 8001564:	08002e24 	.word	0x08002e24
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001586:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b04      	cmp	r3, #4
 8001590:	d007      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x32>
 8001592:	2b08      	cmp	r3, #8
 8001594:	d008      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x38>
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 808d 	bne.w	80016b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800159e:	60bb      	str	r3, [r7, #8]
       break;
 80015a0:	e08c      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015a4:	60bb      	str	r3, [r7, #8]
      break;
 80015a6:	e089      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a8:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b2:	4b45      	ldr	r3, [pc, #276]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d023      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015be:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	099b      	lsrs	r3, r3, #6
 80015c4:	f04f 0400 	mov.w	r4, #0
 80015c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	ea03 0501 	and.w	r5, r3, r1
 80015d4:	ea04 0602 	and.w	r6, r4, r2
 80015d8:	4a3d      	ldr	r2, [pc, #244]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015da:	fb02 f106 	mul.w	r1, r2, r6
 80015de:	2200      	movs	r2, #0
 80015e0:	fb02 f205 	mul.w	r2, r2, r5
 80015e4:	440a      	add	r2, r1
 80015e6:	493a      	ldr	r1, [pc, #232]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015e8:	fba5 0101 	umull	r0, r1, r5, r1
 80015ec:	1853      	adds	r3, r2, r1
 80015ee:	4619      	mov	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f04f 0400 	mov.w	r4, #0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	f7fe fde5 	bl	80001c8 <__aeabi_uldivmod>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e049      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	099b      	lsrs	r3, r3, #6
 800160c:	f04f 0400 	mov.w	r4, #0
 8001610:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	ea03 0501 	and.w	r5, r3, r1
 800161c:	ea04 0602 	and.w	r6, r4, r2
 8001620:	4629      	mov	r1, r5
 8001622:	4632      	mov	r2, r6
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	f04f 0400 	mov.w	r4, #0
 800162c:	0154      	lsls	r4, r2, #5
 800162e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001632:	014b      	lsls	r3, r1, #5
 8001634:	4619      	mov	r1, r3
 8001636:	4622      	mov	r2, r4
 8001638:	1b49      	subs	r1, r1, r5
 800163a:	eb62 0206 	sbc.w	r2, r2, r6
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f04f 0400 	mov.w	r4, #0
 8001646:	0194      	lsls	r4, r2, #6
 8001648:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800164c:	018b      	lsls	r3, r1, #6
 800164e:	1a5b      	subs	r3, r3, r1
 8001650:	eb64 0402 	sbc.w	r4, r4, r2
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	00e2      	lsls	r2, r4, #3
 800165e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001662:	00d9      	lsls	r1, r3, #3
 8001664:	460b      	mov	r3, r1
 8001666:	4614      	mov	r4, r2
 8001668:	195b      	adds	r3, r3, r5
 800166a:	eb44 0406 	adc.w	r4, r4, r6
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	02a2      	lsls	r2, r4, #10
 8001678:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800167c:	0299      	lsls	r1, r3, #10
 800167e:	460b      	mov	r3, r1
 8001680:	4614      	mov	r4, r2
 8001682:	4618      	mov	r0, r3
 8001684:	4621      	mov	r1, r4
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f04f 0400 	mov.w	r4, #0
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	f7fe fd9a 	bl	80001c8 <__aeabi_uldivmod>
 8001694:	4603      	mov	r3, r0
 8001696:	460c      	mov	r4, r1
 8001698:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0c1b      	lsrs	r3, r3, #16
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	3301      	adds	r3, #1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	60bb      	str	r3, [r7, #8]
      break;
 80016b4:	e002      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80016b8:	60bb      	str	r3, [r7, #8]
      break;
 80016ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016bc:	68bb      	ldr	r3, [r7, #8]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	017d7840 	.word	0x017d7840

080016d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e056      	b.n	8001794 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d106      	bne.n	8001706 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7fe ffff 	bl	8000704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800171c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	ea42 0103 	orr.w	r1, r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	f003 0104 	and.w	r1, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_SPI_Transmit+0x22>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e11e      	b.n	80019fc <HAL_SPI_Transmit+0x260>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017c6:	f7ff f8b5 	bl	8000934 <HAL_GetTick>
 80017ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d002      	beq.n	80017e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
 80017de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017e0:	e103      	b.n	80019ea <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_SPI_Transmit+0x52>
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017f2:	e0fa      	b.n	80019ea <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2203      	movs	r2, #3
 80017f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	88fa      	ldrh	r2, [r7, #6]
 8001812:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800183a:	d107      	bne.n	800184c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800184a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b40      	cmp	r3, #64	; 0x40
 8001858:	d007      	beq.n	800186a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001872:	d14b      	bne.n	800190c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <HAL_SPI_Transmit+0xe6>
 800187c:	8afb      	ldrh	r3, [r7, #22]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d13e      	bne.n	8001900 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	1c9a      	adds	r2, r3, #2
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80018a6:	e02b      	b.n	8001900 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d112      	bne.n	80018dc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	1c9a      	adds	r2, r3, #2
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80018da:	e011      	b.n	8001900 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018dc:	f7ff f82a 	bl	8000934 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d803      	bhi.n	80018f4 <HAL_SPI_Transmit+0x158>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018f2:	d102      	bne.n	80018fa <HAL_SPI_Transmit+0x15e>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80018fe:	e074      	b.n	80019ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ce      	bne.n	80018a8 <HAL_SPI_Transmit+0x10c>
 800190a:	e04c      	b.n	80019a6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_SPI_Transmit+0x17e>
 8001914:	8afb      	ldrh	r3, [r7, #22]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d140      	bne.n	800199c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	330c      	adds	r3, #12
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001940:	e02c      	b.n	800199c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b02      	cmp	r3, #2
 800194e:	d113      	bne.n	8001978 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	330c      	adds	r3, #12
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	86da      	strh	r2, [r3, #54]	; 0x36
 8001976:	e011      	b.n	800199c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001978:	f7fe ffdc 	bl	8000934 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d803      	bhi.n	8001990 <HAL_SPI_Transmit+0x1f4>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800198e:	d102      	bne.n	8001996 <HAL_SPI_Transmit+0x1fa>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	77fb      	strb	r3, [r7, #31]
          goto error;
 800199a:	e026      	b.n	80019ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1cd      	bne.n	8001942 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f894 	bl	8001ad8 <SPI_EndRxTxTransaction>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2220      	movs	r2, #32
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10a      	bne.n	80019da <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	77fb      	strb	r3, [r7, #31]
 80019e6:	e000      	b.n	80019ea <HAL_SPI_Transmit+0x24e>
  }

error:
 80019e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a14:	e04c      	b.n	8001ab0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a1c:	d048      	beq.n	8001ab0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a1e:	f7fe ff89 	bl	8000934 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d902      	bls.n	8001a34 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d13d      	bne.n	8001ab0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a4c:	d111      	bne.n	8001a72 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a56:	d004      	beq.n	8001a62 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a60:	d107      	bne.n	8001a72 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a7a:	d10f      	bne.n	8001a9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e00f      	b.n	8001ad0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d1a3      	bne.n	8001a16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <SPI_EndRxTxTransaction+0x7c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <SPI_EndRxTxTransaction+0x80>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0d5b      	lsrs	r3, r3, #21
 8001af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b02:	d112      	bne.n	8001b2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff78 	bl	8001a04 <SPI_WaitFlagStateUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d016      	beq.n	8001b48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0220 	orr.w	r2, r3, #32
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e00f      	b.n	8001b4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d0f2      	beq.n	8001b2a <SPI_EndRxTxTransaction+0x52>
 8001b44:	e000      	b.n	8001b48 <SPI_EndRxTxTransaction+0x70>
        break;
 8001b46:	bf00      	nop
  }

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	165e9f81 	.word	0x165e9f81

08001b5c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001b66:	2200      	movs	r2, #0
 8001b68:	2110      	movs	r1, #16
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <ST7789_WriteCommand+0x40>)
 8001b6c:	f7ff f990 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001b70:	2200      	movs	r2, #0
 8001b72:	2102      	movs	r1, #2
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <ST7789_WriteCommand+0x40>)
 8001b76:	f7ff f98b 	bl	8000e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001b7a:	1df9      	adds	r1, r7, #7
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b80:	2201      	movs	r2, #1
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <ST7789_WriteCommand+0x44>)
 8001b84:	f7ff fe0a 	bl	800179c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <ST7789_WriteCommand+0x40>)
 8001b8e:	f7ff f97f 	bl	8000e90 <HAL_GPIO_WritePin>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	20000040 	.word	0x20000040

08001ba4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	4815      	ldr	r0, [pc, #84]	; (8001c08 <ST7789_WriteData+0x64>)
 8001bb4:	f7ff f96c 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2102      	movs	r1, #2
 8001bbc:	4812      	ldr	r0, [pc, #72]	; (8001c08 <ST7789_WriteData+0x64>)
 8001bbe:	f7ff f967 	bl	8000e90 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001bc2:	e015      	b.n	8001bf0 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	bf28      	it	cs
 8001bce:	4613      	movcs	r3, r2
 8001bd0:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001bd2:	89fa      	ldrh	r2, [r7, #14]
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <ST7789_WriteData+0x68>)
 8001bdc:	f7ff fdde 	bl	800179c <HAL_SPI_Transmit>
		buff += chunk_size;
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e6      	bne.n	8001bc4 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4803      	ldr	r0, [pc, #12]	; (8001c08 <ST7789_WriteData+0x64>)
 8001bfc:	f7ff f948 	bl	8000e90 <HAL_GPIO_WritePin>
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	20000040 	.word	0x20000040

08001c10 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <ST7789_WriteSmallData+0x40>)
 8001c20:	f7ff f936 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001c24:	2201      	movs	r2, #1
 8001c26:	2102      	movs	r1, #2
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <ST7789_WriteSmallData+0x40>)
 8001c2a:	f7ff f931 	bl	8000e90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001c2e:	1df9      	adds	r1, r7, #7
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c34:	2201      	movs	r2, #1
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <ST7789_WriteSmallData+0x44>)
 8001c38:	f7ff fdb0 	bl	800179c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2110      	movs	r1, #16
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <ST7789_WriteSmallData+0x40>)
 8001c42:	f7ff f925 	bl	8000e90 <HAL_GPIO_WritePin>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40020000 	.word	0x40020000
 8001c54:	20000040 	.word	0x20000040

08001c58 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001c62:	2036      	movs	r0, #54	; 0x36
 8001c64:	f7ff ff7a 	bl	8001b5c <ST7789_WriteCommand>
	switch (m) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d81a      	bhi.n	8001ca4 <ST7789_SetRotation+0x4c>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <ST7789_SetRotation+0x1c>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c8d 	.word	0x08001c8d
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001c9d 	.word	0x08001c9d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001c84:	20c0      	movs	r0, #192	; 0xc0
 8001c86:	f7ff ffc3 	bl	8001c10 <ST7789_WriteSmallData>
		break;
 8001c8a:	e00c      	b.n	8001ca6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001c8c:	20a0      	movs	r0, #160	; 0xa0
 8001c8e:	f7ff ffbf 	bl	8001c10 <ST7789_WriteSmallData>
		break;
 8001c92:	e008      	b.n	8001ca6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff ffbb 	bl	8001c10 <ST7789_WriteSmallData>
		break;
 8001c9a:	e004      	b.n	8001ca6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001c9c:	2060      	movs	r0, #96	; 0x60
 8001c9e:	f7ff ffb7 	bl	8001c10 <ST7789_WriteSmallData>
		break;
 8001ca2:	e000      	b.n	8001ca6 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001ca4:	bf00      	nop
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop

08001cb0 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	80fb      	strh	r3, [r7, #6]
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80bb      	strh	r3, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4824      	ldr	r0, [pc, #144]	; (8001d64 <ST7789_SetAddressWindow+0xb4>)
 8001cd4:	f7ff f8dc 	bl	8000e90 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	82fb      	strh	r3, [r7, #22]
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	827b      	strh	r3, [r7, #18]
 8001ce4:	883b      	ldrh	r3, [r7, #0]
 8001ce6:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001ce8:	202a      	movs	r0, #42	; 0x2a
 8001cea:	f7ff ff37 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001cee:	8afb      	ldrh	r3, [r7, #22]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	733b      	strb	r3, [r7, #12]
 8001cf8:	8afb      	ldrh	r3, [r7, #22]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	737b      	strb	r3, [r7, #13]
 8001cfe:	8abb      	ldrh	r3, [r7, #20]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	73bb      	strb	r3, [r7, #14]
 8001d08:	8abb      	ldrh	r3, [r7, #20]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2104      	movs	r1, #4
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff45 	bl	8001ba4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001d1a:	202b      	movs	r0, #43	; 0x2b
 8001d1c:	f7ff ff1e 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001d20:	8a7b      	ldrh	r3, [r7, #18]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	723b      	strb	r3, [r7, #8]
 8001d2a:	8a7b      	ldrh	r3, [r7, #18]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	727b      	strb	r3, [r7, #9]
 8001d30:	8a3b      	ldrh	r3, [r7, #16]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	72bb      	strb	r3, [r7, #10]
 8001d3a:	8a3b      	ldrh	r3, [r7, #16]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2104      	movs	r1, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff2c 	bl	8001ba4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001d4c:	202c      	movs	r0, #44	; 0x2c
 8001d4e:	f7ff ff05 	bl	8001b5c <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001d52:	2201      	movs	r2, #1
 8001d54:	2110      	movs	r1, #16
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <ST7789_SetAddressWindow+0xb4>)
 8001d58:	f7ff f89a 	bl	8000e90 <HAL_GPIO_WritePin>
}
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	40020000 	.word	0x40020000

08001d68 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 8001d6e:	2019      	movs	r0, #25
 8001d70:	f7fe fdec 	bl	800094c <HAL_Delay>
    ST7789_RST_Clr();
 8001d74:	2200      	movs	r2, #0
 8001d76:	2108      	movs	r1, #8
 8001d78:	4846      	ldr	r0, [pc, #280]	; (8001e94 <ST7789_Init+0x12c>)
 8001d7a:	f7ff f889 	bl	8000e90 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8001d7e:	2019      	movs	r0, #25
 8001d80:	f7fe fde4 	bl	800094c <HAL_Delay>
    ST7789_RST_Set();
 8001d84:	2201      	movs	r2, #1
 8001d86:	2108      	movs	r1, #8
 8001d88:	4842      	ldr	r0, [pc, #264]	; (8001e94 <ST7789_Init+0x12c>)
 8001d8a:	f7ff f881 	bl	8000e90 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001d8e:	2032      	movs	r0, #50	; 0x32
 8001d90:	f7fe fddc 	bl	800094c <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001d94:	203a      	movs	r0, #58	; 0x3a
 8001d96:	f7ff fee1 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001d9a:	2055      	movs	r0, #85	; 0x55
 8001d9c:	f7ff ff38 	bl	8001c10 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001da0:	20b2      	movs	r0, #178	; 0xb2
 8001da2:	f7ff fedb 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001da6:	4a3c      	ldr	r2, [pc, #240]	; (8001e98 <ST7789_Init+0x130>)
 8001da8:	f107 0320 	add.w	r3, r7, #32
 8001dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db0:	6018      	str	r0, [r3, #0]
 8001db2:	3304      	adds	r3, #4
 8001db4:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001db6:	f107 0320 	add.w	r3, r7, #32
 8001dba:	2105      	movs	r1, #5
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fef1 	bl	8001ba4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff ff48 	bl	8001c58 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001dc8:	20b7      	movs	r0, #183	; 0xb7
 8001dca:	f7ff fec7 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001dce:	2035      	movs	r0, #53	; 0x35
 8001dd0:	f7ff ff1e 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001dd4:	20bb      	movs	r0, #187	; 0xbb
 8001dd6:	f7ff fec1 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001dda:	2019      	movs	r0, #25
 8001ddc:	f7ff ff18 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001de0:	20c0      	movs	r0, #192	; 0xc0
 8001de2:	f7ff febb 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001de6:	202c      	movs	r0, #44	; 0x2c
 8001de8:	f7ff ff12 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001dec:	20c2      	movs	r0, #194	; 0xc2
 8001dee:	f7ff feb5 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7ff ff0c 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001df8:	20c3      	movs	r0, #195	; 0xc3
 8001dfa:	f7ff feaf 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001dfe:	2012      	movs	r0, #18
 8001e00:	f7ff ff06 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001e04:	20c4      	movs	r0, #196	; 0xc4
 8001e06:	f7ff fea9 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001e0a:	2020      	movs	r0, #32
 8001e0c:	f7ff ff00 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001e10:	20c6      	movs	r0, #198	; 0xc6
 8001e12:	f7ff fea3 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001e16:	200f      	movs	r0, #15
 8001e18:	f7ff fefa 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001e1c:	20d0      	movs	r0, #208	; 0xd0
 8001e1e:	f7ff fe9d 	bl	8001b5c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001e22:	20a4      	movs	r0, #164	; 0xa4
 8001e24:	f7ff fef4 	bl	8001c10 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001e28:	20a1      	movs	r0, #161	; 0xa1
 8001e2a:	f7ff fef1 	bl	8001c10 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001e2e:	20e0      	movs	r0, #224	; 0xe0
 8001e30:	f7ff fe94 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <ST7789_Init+0x134>)
 8001e36:	f107 0410 	add.w	r4, r7, #16
 8001e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e3c:	c407      	stmia	r4!, {r0, r1, r2}
 8001e3e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	210e      	movs	r1, #14
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff feac 	bl	8001ba4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001e4c:	20e1      	movs	r0, #225	; 0xe1
 8001e4e:	f7ff fe85 	bl	8001b5c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <ST7789_Init+0x138>)
 8001e54:	463c      	mov	r4, r7
 8001e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e58:	c407      	stmia	r4!, {r0, r1, r2}
 8001e5a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	210e      	movs	r1, #14
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe9f 	bl	8001ba4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001e66:	2021      	movs	r0, #33	; 0x21
 8001e68:	f7ff fe78 	bl	8001b5c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001e6c:	2011      	movs	r0, #17
 8001e6e:	f7ff fe75 	bl	8001b5c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001e72:	2013      	movs	r0, #19
 8001e74:	f7ff fe72 	bl	8001b5c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001e78:	2029      	movs	r0, #41	; 0x29
 8001e7a:	f7ff fe6f 	bl	8001b5c <ST7789_WriteCommand>

	HAL_Delay(50);
 8001e7e:	2032      	movs	r0, #50	; 0x32
 8001e80:	f7fe fd64 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 f80d 	bl	8001ea4 <ST7789_Fill_Color>
}
 8001e8a:	bf00      	nop
 8001e8c:	372c      	adds	r7, #44	; 0x2c
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40020000 	.word	0x40020000
 8001e98:	08002d8c 	.word	0x08002d8c
 8001e9c:	08002d94 	.word	0x08002d94
 8001ea0:	08002da4 	.word	0x08002da4

08001ea4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001eae:	23ef      	movs	r3, #239	; 0xef
 8001eb0:	22ef      	movs	r2, #239	; 0xef
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff fefb 	bl	8001cb0 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	4816      	ldr	r0, [pc, #88]	; (8001f18 <ST7789_Fill_Color+0x74>)
 8001ec0:	f7fe ffe6 	bl	8000e90 <HAL_GPIO_WritePin>
	for (i = 0; i < ST7789_WIDTH; i++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	81fb      	strh	r3, [r7, #14]
 8001ec8:	e019      	b.n	8001efe <ST7789_Fill_Color+0x5a>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	81bb      	strh	r3, [r7, #12]
 8001ece:	e010      	b.n	8001ef2 <ST7789_Fill_Color+0x4e>
			uint8_t data[] = {color >> 8, color & 0xFF};
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	723b      	strb	r3, [r7, #8]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe5c 	bl	8001ba4 <ST7789_WriteData>
		for (j = 0; j < ST7789_HEIGHT; j++) {
 8001eec:	89bb      	ldrh	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	81bb      	strh	r3, [r7, #12]
 8001ef2:	89bb      	ldrh	r3, [r7, #12]
 8001ef4:	2bef      	cmp	r3, #239	; 0xef
 8001ef6:	d9eb      	bls.n	8001ed0 <ST7789_Fill_Color+0x2c>
	for (i = 0; i < ST7789_WIDTH; i++)
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	3301      	adds	r3, #1
 8001efc:	81fb      	strh	r3, [r7, #14]
 8001efe:	89fb      	ldrh	r3, [r7, #14]
 8001f00:	2bef      	cmp	r3, #239	; 0xef
 8001f02:	d9e2      	bls.n	8001eca <ST7789_Fill_Color+0x26>
		}
	ST7789_UnSelect();
 8001f04:	2201      	movs	r2, #1
 8001f06:	2110      	movs	r1, #16
 8001f08:	4803      	ldr	r0, [pc, #12]	; (8001f18 <ST7789_Fill_Color+0x74>)
 8001f0a:	f7fe ffc1 	bl	8000e90 <HAL_GPIO_WritePin>
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40020000 	.word	0x40020000

08001f1c <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
 8001f26:	460b      	mov	r3, r1
 8001f28:	80bb      	strh	r3, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	2bef      	cmp	r3, #239	; 0xef
 8001f32:	d821      	bhi.n	8001f78 <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001f34:	88bb      	ldrh	r3, [r7, #4]
 8001f36:	2bef      	cmp	r3, #239	; 0xef
 8001f38:	d81e      	bhi.n	8001f78 <ST7789_DrawPixel+0x5c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8001f3a:	88bb      	ldrh	r3, [r7, #4]
 8001f3c:	88fa      	ldrh	r2, [r7, #6]
 8001f3e:	88b9      	ldrh	r1, [r7, #4]
 8001f40:	88f8      	ldrh	r0, [r7, #6]
 8001f42:	f7ff feb5 	bl	8001cb0 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	733b      	strb	r3, [r7, #12]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 8001f56:	2200      	movs	r2, #0
 8001f58:	2110      	movs	r1, #16
 8001f5a:	4809      	ldr	r0, [pc, #36]	; (8001f80 <ST7789_DrawPixel+0x64>)
 8001f5c:	f7fe ff98 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2102      	movs	r1, #2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fe1c 	bl	8001ba4 <ST7789_WriteData>
	ST7789_UnSelect();
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2110      	movs	r1, #16
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <ST7789_DrawPixel+0x64>)
 8001f72:	f7fe ff8d 	bl	8000e90 <HAL_GPIO_WritePin>
 8001f76:	e000      	b.n	8001f7a <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001f78:	bf00      	nop
}
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40020000 	.word	0x40020000

08001f84 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	4603      	mov	r3, r0
 8001f98:	80bb      	strh	r3, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8001fa2:	883a      	ldrh	r2, [r7, #0]
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001fac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001fb0:	8879      	ldrh	r1, [r7, #2]
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	1acb      	subs	r3, r1, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bfb8      	it	lt
 8001fba:	425b      	neglt	r3, r3
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	bfcc      	ite	gt
 8001fc0:	2301      	movgt	r3, #1
 8001fc2:	2300      	movle	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <ST7789_DrawLine+0x62>
		swap = x0;
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8001fd6:	8a3b      	ldrh	r3, [r7, #16]
 8001fd8:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8001fde:	883b      	ldrh	r3, [r7, #0]
 8001fe0:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8001fe2:	8a3b      	ldrh	r3, [r7, #16]
 8001fe4:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d90b      	bls.n	8002006 <ST7789_DrawLine+0x82>
		swap = x0;
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8001ff6:	8a3b      	ldrh	r3, [r7, #16]
 8001ff8:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8001ffe:	883b      	ldrh	r3, [r7, #0]
 8002000:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8002002:	8a3b      	ldrh	r3, [r7, #16]
 8002004:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8002010:	883a      	ldrh	r2, [r7, #0]
 8002012:	88bb      	ldrh	r3, [r7, #4]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	bfb8      	it	lt
 800201a:	425b      	neglt	r3, r3
 800201c:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 800201e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002022:	0fda      	lsrs	r2, r3, #31
 8002024:	4413      	add	r3, r2
 8002026:	105b      	asrs	r3, r3, #1
 8002028:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800202a:	88ba      	ldrh	r2, [r7, #4]
 800202c:	883b      	ldrh	r3, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d202      	bcs.n	8002038 <ST7789_DrawLine+0xb4>
        ystep = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	82bb      	strh	r3, [r7, #20]
 8002036:	e028      	b.n	800208a <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8002038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800203c:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 800203e:	e024      	b.n	800208a <ST7789_DrawLine+0x106>
        if (steep) {
 8002040:	8a7b      	ldrh	r3, [r7, #18]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8002046:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002048:	88f9      	ldrh	r1, [r7, #6]
 800204a:	88bb      	ldrh	r3, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff65 	bl	8001f1c <ST7789_DrawPixel>
 8002052:	e005      	b.n	8002060 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8002054:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002056:	88b9      	ldrh	r1, [r7, #4]
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff5e 	bl	8001f1c <ST7789_DrawPixel>
        }
        err -= dy;
 8002060:	8afa      	ldrh	r2, [r7, #22]
 8002062:	89bb      	ldrh	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	b29b      	uxth	r3, r3
 8002068:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800206a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800206e:	2b00      	cmp	r3, #0
 8002070:	da08      	bge.n	8002084 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8002072:	8aba      	ldrh	r2, [r7, #20]
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800207a:	8afa      	ldrh	r2, [r7, #22]
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	4413      	add	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	3301      	adds	r3, #1
 8002088:	80fb      	strh	r3, [r7, #6]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	429a      	cmp	r2, r3
 8002090:	d9d6      	bls.n	8002040 <ST7789_DrawLine+0xbc>
        }
    }
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
	...

0800209c <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	80fb      	strh	r3, [r7, #6]
 80020ae:	4603      	mov	r3, r0
 80020b0:	80bb      	strh	r3, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]
 80020b6:	4613      	mov	r3, r2
 80020b8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80020ba:	2200      	movs	r2, #0
 80020bc:	2110      	movs	r1, #16
 80020be:	4818      	ldr	r0, [pc, #96]	; (8002120 <ST7789_DrawRectangle+0x84>)
 80020c0:	f7fe fee6 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 80020c4:	88bc      	ldrh	r4, [r7, #4]
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	88b9      	ldrh	r1, [r7, #4]
 80020ca:	88f8      	ldrh	r0, [r7, #6]
 80020cc:	8b3b      	ldrh	r3, [r7, #24]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4623      	mov	r3, r4
 80020d2:	f7ff ff57 	bl	8001f84 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 80020d6:	883c      	ldrh	r4, [r7, #0]
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	88b9      	ldrh	r1, [r7, #4]
 80020dc:	88f8      	ldrh	r0, [r7, #6]
 80020de:	8b3b      	ldrh	r3, [r7, #24]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4623      	mov	r3, r4
 80020e4:	f7ff ff4e 	bl	8001f84 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 80020e8:	883c      	ldrh	r4, [r7, #0]
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	8839      	ldrh	r1, [r7, #0]
 80020ee:	88f8      	ldrh	r0, [r7, #6]
 80020f0:	8b3b      	ldrh	r3, [r7, #24]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	4623      	mov	r3, r4
 80020f6:	f7ff ff45 	bl	8001f84 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 80020fa:	883c      	ldrh	r4, [r7, #0]
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	88b9      	ldrh	r1, [r7, #4]
 8002100:	8878      	ldrh	r0, [r7, #2]
 8002102:	8b3b      	ldrh	r3, [r7, #24]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4623      	mov	r3, r4
 8002108:	f7ff ff3c 	bl	8001f84 <ST7789_DrawLine>
	ST7789_UnSelect();
 800210c:	2201      	movs	r2, #1
 800210e:	2110      	movs	r1, #16
 8002110:	4803      	ldr	r0, [pc, #12]	; (8002120 <ST7789_DrawRectangle+0x84>)
 8002112:	f7fe febd 	bl	8000e90 <HAL_GPIO_WritePin>
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	40020000 	.word	0x40020000

08002124 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4623      	mov	r3, r4
 8002134:	80fb      	strh	r3, [r7, #6]
 8002136:	4603      	mov	r3, r0
 8002138:	80bb      	strh	r3, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
 800213e:	4613      	mov	r3, r2
 8002140:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	b29b      	uxth	r3, r3
 8002146:	f1c3 0301 	rsb	r3, r3, #1
 800214a:	b29b      	uxth	r3, r3
 800214c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	03d2      	lsls	r2, r2, #15
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 800216a:	2200      	movs	r2, #0
 800216c:	2110      	movs	r1, #16
 800216e:	485f      	ldr	r0, [pc, #380]	; (80022ec <ST7789_DrawCircle+0x1c8>)
 8002170:	f7fe fe8e 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	b29a      	uxth	r2, r3
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	b299      	uxth	r1, r3
 800217e:	883a      	ldrh	r2, [r7, #0]
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff feca 	bl	8001f1c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	b29b      	uxth	r3, r3
 800218c:	88ba      	ldrh	r2, [r7, #4]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	b299      	uxth	r1, r3
 8002192:	883a      	ldrh	r2, [r7, #0]
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fec0 	bl	8001f1c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	4413      	add	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	883a      	ldrh	r2, [r7, #0]
 80021a8:	88b9      	ldrh	r1, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff feb6 	bl	8001f1c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	88fa      	ldrh	r2, [r7, #6]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	883a      	ldrh	r2, [r7, #0]
 80021bc:	88b9      	ldrh	r1, [r7, #4]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff feac 	bl	8001f1c <ST7789_DrawPixel>

	while (x < y) {
 80021c4:	e081      	b.n	80022ca <ST7789_DrawCircle+0x1a6>
		if (f >= 0) {
 80021c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0e      	blt.n	80021ec <ST7789_DrawCircle+0xc8>
			y--;
 80021ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80021da:	8a7b      	ldrh	r3, [r7, #18]
 80021dc:	3302      	adds	r3, #2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80021e2:	8afa      	ldrh	r2, [r7, #22]
 80021e4:	8a7b      	ldrh	r3, [r7, #18]
 80021e6:	4413      	add	r3, r2
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80021ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80021f8:	8abb      	ldrh	r3, [r7, #20]
 80021fa:	3302      	adds	r3, #2
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002200:	8afa      	ldrh	r2, [r7, #22]
 8002202:	8abb      	ldrh	r3, [r7, #20]
 8002204:	4413      	add	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 800220a:	8a3a      	ldrh	r2, [r7, #16]
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	4413      	add	r3, r2
 8002210:	b298      	uxth	r0, r3
 8002212:	89fa      	ldrh	r2, [r7, #14]
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	b29b      	uxth	r3, r3
 800221a:	883a      	ldrh	r2, [r7, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f7ff fe7d 	bl	8001f1c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8002222:	8a3b      	ldrh	r3, [r7, #16]
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	b298      	uxth	r0, r3
 800222a:	89fa      	ldrh	r2, [r7, #14]
 800222c:	88bb      	ldrh	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	b29b      	uxth	r3, r3
 8002232:	883a      	ldrh	r2, [r7, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f7ff fe71 	bl	8001f1c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 800223a:	8a3a      	ldrh	r2, [r7, #16]
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	4413      	add	r3, r2
 8002240:	b298      	uxth	r0, r3
 8002242:	89fb      	ldrh	r3, [r7, #14]
 8002244:	88ba      	ldrh	r2, [r7, #4]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	b29b      	uxth	r3, r3
 800224a:	883a      	ldrh	r2, [r7, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f7ff fe65 	bl	8001f1c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8002252:	8a3b      	ldrh	r3, [r7, #16]
 8002254:	88fa      	ldrh	r2, [r7, #6]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b298      	uxth	r0, r3
 800225a:	89fb      	ldrh	r3, [r7, #14]
 800225c:	88ba      	ldrh	r2, [r7, #4]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	b29b      	uxth	r3, r3
 8002262:	883a      	ldrh	r2, [r7, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f7ff fe59 	bl	8001f1c <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 800226a:	89fa      	ldrh	r2, [r7, #14]
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4413      	add	r3, r2
 8002270:	b298      	uxth	r0, r3
 8002272:	8a3a      	ldrh	r2, [r7, #16]
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	883a      	ldrh	r2, [r7, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff fe4d 	bl	8001f1c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	b298      	uxth	r0, r3
 800228a:	8a3a      	ldrh	r2, [r7, #16]
 800228c:	88bb      	ldrh	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	883a      	ldrh	r2, [r7, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f7ff fe41 	bl	8001f1c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 800229a:	89fa      	ldrh	r2, [r7, #14]
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4413      	add	r3, r2
 80022a0:	b298      	uxth	r0, r3
 80022a2:	8a3b      	ldrh	r3, [r7, #16]
 80022a4:	88ba      	ldrh	r2, [r7, #4]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	883a      	ldrh	r2, [r7, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7ff fe35 	bl	8001f1c <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 80022b2:	89fb      	ldrh	r3, [r7, #14]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	b298      	uxth	r0, r3
 80022ba:	8a3b      	ldrh	r3, [r7, #16]
 80022bc:	88ba      	ldrh	r2, [r7, #4]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	883a      	ldrh	r2, [r7, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f7ff fe29 	bl	8001f1c <ST7789_DrawPixel>
	while (x < y) {
 80022ca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80022ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f6ff af77 	blt.w	80021c6 <ST7789_DrawCircle+0xa2>
	}
	ST7789_UnSelect();
 80022d8:	2201      	movs	r2, #1
 80022da:	2110      	movs	r1, #16
 80022dc:	4803      	ldr	r0, [pc, #12]	; (80022ec <ST7789_DrawCircle+0x1c8>)
 80022de:	f7fe fdd7 	bl	8000e90 <HAL_GPIO_WritePin>
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40020000 	.word	0x40020000

080022f0 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4604      	mov	r4, r0
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	80fb      	strh	r3, [r7, #6]
 8002302:	4603      	mov	r3, r0
 8002304:	80bb      	strh	r3, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	807b      	strh	r3, [r7, #2]
 800230a:	4613      	mov	r3, r2
 800230c:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2bef      	cmp	r3, #239	; 0xef
 8002312:	d833      	bhi.n	800237c <ST7789_DrawImage+0x8c>
 8002314:	88bb      	ldrh	r3, [r7, #4]
 8002316:	2bef      	cmp	r3, #239	; 0xef
 8002318:	d830      	bhi.n	800237c <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4413      	add	r3, r2
 8002320:	3b01      	subs	r3, #1
 8002322:	2bef      	cmp	r3, #239	; 0xef
 8002324:	dc2c      	bgt.n	8002380 <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8002326:	88ba      	ldrh	r2, [r7, #4]
 8002328:	883b      	ldrh	r3, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	3b01      	subs	r3, #1
 800232e:	2bef      	cmp	r3, #239	; 0xef
 8002330:	dc28      	bgt.n	8002384 <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 8002332:	2200      	movs	r2, #0
 8002334:	2110      	movs	r1, #16
 8002336:	4815      	ldr	r0, [pc, #84]	; (800238c <ST7789_DrawImage+0x9c>)
 8002338:	f7fe fdaa 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	4413      	add	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29c      	uxth	r4, r3
 8002348:	88ba      	ldrh	r2, [r7, #4]
 800234a:	883b      	ldrh	r3, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	88b9      	ldrh	r1, [r7, #4]
 8002356:	88f8      	ldrh	r0, [r7, #6]
 8002358:	4622      	mov	r2, r4
 800235a:	f7ff fca9 	bl	8001cb0 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	883a      	ldrh	r2, [r7, #0]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4619      	mov	r1, r3
 800236a:	69b8      	ldr	r0, [r7, #24]
 800236c:	f7ff fc1a 	bl	8001ba4 <ST7789_WriteData>
	ST7789_UnSelect();
 8002370:	2201      	movs	r2, #1
 8002372:	2110      	movs	r1, #16
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <ST7789_DrawImage+0x9c>)
 8002376:	f7fe fd8b 	bl	8000e90 <HAL_GPIO_WritePin>
 800237a:	e004      	b.n	8002386 <ST7789_DrawImage+0x96>
		return;
 800237c:	bf00      	nop
 800237e:	e002      	b.n	8002386 <ST7789_DrawImage+0x96>
		return;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <ST7789_DrawImage+0x96>
		return;
 8002384:	bf00      	nop
}
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}
 800238c:	40020000 	.word	0x40020000

08002390 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002390:	b082      	sub	sp, #8
 8002392:	b590      	push	{r4, r7, lr}
 8002394:	b089      	sub	sp, #36	; 0x24
 8002396:	af00      	add	r7, sp, #0
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
 800239e:	460b      	mov	r3, r1
 80023a0:	80bb      	strh	r3, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80023a6:	2200      	movs	r2, #0
 80023a8:	2110      	movs	r1, #16
 80023aa:	4838      	ldr	r0, [pc, #224]	; (800248c <ST7789_WriteChar+0xfc>)
 80023ac:	f7fe fd70 	bl	8000e90 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80023b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4413      	add	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29c      	uxth	r4, r3
 80023c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	88bb      	ldrh	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	88b9      	ldrh	r1, [r7, #4]
 80023d2:	88f8      	ldrh	r0, [r7, #6]
 80023d4:	4622      	mov	r2, r4
 80023d6:	f7ff fc6b 	bl	8001cb0 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e043      	b.n	8002468 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 80023e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	3b20      	subs	r3, #32
 80023e6:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	440b      	add	r3, r1
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e029      	b.n	8002456 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00e      	beq.n	8002430 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002412:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	743b      	strb	r3, [r7, #16]
 800241c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800241e:	b2db      	uxtb	r3, r3
 8002420:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	2102      	movs	r1, #2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fbbb 	bl	8001ba4 <ST7789_WriteData>
 800242e:	e00f      	b.n	8002450 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	733b      	strb	r3, [r7, #12]
 800243c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002440:	b2db      	uxtb	r3, r3
 8002442:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fbaa 	bl	8001ba4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3301      	adds	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800245a:	461a      	mov	r2, r3
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4293      	cmp	r3, r2
 8002460:	d3cf      	bcc.n	8002402 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800246c:	461a      	mov	r2, r3
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4293      	cmp	r3, r2
 8002472:	d3b5      	bcc.n	80023e0 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8002474:	2201      	movs	r2, #1
 8002476:	2110      	movs	r1, #16
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <ST7789_WriteChar+0xfc>)
 800247a:	f7fe fd09 	bl	8000e90 <HAL_GPIO_WritePin>
}
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002488:	b002      	add	sp, #8
 800248a:	4770      	bx	lr
 800248c:	40020000 	.word	0x40020000

08002490 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002490:	b082      	sub	sp, #8
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af04      	add	r7, sp, #16
 8002498:	603a      	str	r2, [r7, #0]
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	4603      	mov	r3, r0
 800249e:	80fb      	strh	r3, [r7, #6]
 80024a0:	460b      	mov	r3, r1
 80024a2:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80024a4:	2200      	movs	r2, #0
 80024a6:	2110      	movs	r1, #16
 80024a8:	4821      	ldr	r0, [pc, #132]	; (8002530 <ST7789_WriteString+0xa0>)
 80024aa:	f7fe fcf1 	bl	8000e90 <HAL_GPIO_WritePin>
	while (*str) {
 80024ae:	e02d      	b.n	800250c <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	7d3a      	ldrb	r2, [r7, #20]
 80024b4:	4413      	add	r3, r2
 80024b6:	2bef      	cmp	r3, #239	; 0xef
 80024b8:	dd13      	ble.n	80024e2 <ST7789_WriteString+0x52>
			x = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80024be:	7d7b      	ldrb	r3, [r7, #21]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	88bb      	ldrh	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80024c8:	88bb      	ldrh	r3, [r7, #4]
 80024ca:	7d7a      	ldrb	r2, [r7, #21]
 80024cc:	4413      	add	r3, r2
 80024ce:	2bef      	cmp	r3, #239	; 0xef
 80024d0:	dc21      	bgt.n	8002516 <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d103      	bne.n	80024e2 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	603b      	str	r3, [r7, #0]
				continue;
 80024e0:	e014      	b.n	800250c <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	88b9      	ldrh	r1, [r7, #4]
 80024e8:	88f8      	ldrh	r0, [r7, #6]
 80024ea:	8c3b      	ldrh	r3, [r7, #32]
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	8bbb      	ldrh	r3, [r7, #28]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f7ff ff4a 	bl	8002390 <ST7789_WriteChar>
		x += font.width;
 80024fc:	7d3b      	ldrb	r3, [r7, #20]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	4413      	add	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
		str++;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	603b      	str	r3, [r7, #0]
	while (*str) {
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1cd      	bne.n	80024b0 <ST7789_WriteString+0x20>
 8002514:	e000      	b.n	8002518 <ST7789_WriteString+0x88>
				break;
 8002516:	bf00      	nop
	}
	ST7789_UnSelect();
 8002518:	2201      	movs	r2, #1
 800251a:	2110      	movs	r1, #16
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <ST7789_WriteString+0xa0>)
 800251e:	f7fe fcb7 	bl	8000e90 <HAL_GPIO_WritePin>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800252c:	b002      	add	sp, #8
 800252e:	4770      	bx	lr
 8002530:	40020000 	.word	0x40020000

08002534 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b087      	sub	sp, #28
 8002538:	af02      	add	r7, sp, #8
 800253a:	4604      	mov	r4, r0
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4623      	mov	r3, r4
 8002544:	80fb      	strh	r3, [r7, #6]
 8002546:	4603      	mov	r3, r0
 8002548:	80bb      	strh	r3, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
 800254e:	4613      	mov	r3, r2
 8002550:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002552:	2200      	movs	r2, #0
 8002554:	2110      	movs	r1, #16
 8002556:	4822      	ldr	r0, [pc, #136]	; (80025e0 <ST7789_DrawFilledRectangle+0xac>)
 8002558:	f7fe fc9a 	bl	8000e90 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	2bef      	cmp	r3, #239	; 0xef
 8002560:	d83a      	bhi.n	80025d8 <ST7789_DrawFilledRectangle+0xa4>
 8002562:	88bb      	ldrh	r3, [r7, #4]
 8002564:	2bef      	cmp	r3, #239	; 0xef
 8002566:	d837      	bhi.n	80025d8 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	4413      	add	r3, r2
 800256e:	2bef      	cmp	r3, #239	; 0xef
 8002570:	dd03      	ble.n	800257a <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002578:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 800257a:	88ba      	ldrh	r2, [r7, #4]
 800257c:	883b      	ldrh	r3, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	2bef      	cmp	r3, #239	; 0xef
 8002582:	dd03      	ble.n	800258c <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 8002584:	88bb      	ldrh	r3, [r7, #4]
 8002586:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800258a:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e017      	b.n	80025c2 <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	b29a      	uxth	r2, r3
 8002596:	88bb      	ldrh	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	b299      	uxth	r1, r3
 800259c:	88fa      	ldrh	r2, [r7, #6]
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	4413      	add	r3, r2
 80025a2:	b29c      	uxth	r4, r3
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	88bb      	ldrh	r3, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	88f8      	ldrh	r0, [r7, #6]
 80025b0:	8c3b      	ldrh	r3, [r7, #32]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	4622      	mov	r2, r4
 80025b8:	f7ff fce4 	bl	8001f84 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	3301      	adds	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	883a      	ldrh	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d2e2      	bcs.n	8002592 <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 80025cc:	2201      	movs	r2, #1
 80025ce:	2110      	movs	r1, #16
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <ST7789_DrawFilledRectangle+0xac>)
 80025d2:	f7fe fc5d 	bl	8000e90 <HAL_GPIO_WritePin>
 80025d6:	e000      	b.n	80025da <ST7789_DrawFilledRectangle+0xa6>
		return;
 80025d8:	bf00      	nop
}
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	40020000 	.word	0x40020000

080025e4 <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	80fb      	strh	r3, [r7, #6]
 80025f6:	4603      	mov	r3, r0
 80025f8:	80bb      	strh	r3, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]
 80025fe:	4613      	mov	r3, r2
 8002600:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002602:	2200      	movs	r2, #0
 8002604:	2110      	movs	r1, #16
 8002606:	4813      	ldr	r0, [pc, #76]	; (8002654 <ST7789_DrawTriangle+0x70>)
 8002608:	f7fe fc42 	bl	8000e90 <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 800260c:	883c      	ldrh	r4, [r7, #0]
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	88b9      	ldrh	r1, [r7, #4]
 8002612:	88f8      	ldrh	r0, [r7, #6]
 8002614:	8c3b      	ldrh	r3, [r7, #32]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4623      	mov	r3, r4
 800261a:	f7ff fcb3 	bl	8001f84 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 800261e:	8bbc      	ldrh	r4, [r7, #28]
 8002620:	8b3a      	ldrh	r2, [r7, #24]
 8002622:	8839      	ldrh	r1, [r7, #0]
 8002624:	8878      	ldrh	r0, [r7, #2]
 8002626:	8c3b      	ldrh	r3, [r7, #32]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4623      	mov	r3, r4
 800262c:	f7ff fcaa 	bl	8001f84 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8002630:	88bc      	ldrh	r4, [r7, #4]
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	8bb9      	ldrh	r1, [r7, #28]
 8002636:	8b38      	ldrh	r0, [r7, #24]
 8002638:	8c3b      	ldrh	r3, [r7, #32]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4623      	mov	r3, r4
 800263e:	f7ff fca1 	bl	8001f84 <ST7789_DrawLine>
	ST7789_UnSelect();
 8002642:	2201      	movs	r2, #1
 8002644:	2110      	movs	r1, #16
 8002646:	4803      	ldr	r0, [pc, #12]	; (8002654 <ST7789_DrawTriangle+0x70>)
 8002648:	f7fe fc22 	bl	8000e90 <HAL_GPIO_WritePin>
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	40020000 	.word	0x40020000

08002658 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b08d      	sub	sp, #52	; 0x34
 800265c:	af02      	add	r7, sp, #8
 800265e:	4604      	mov	r4, r0
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4623      	mov	r3, r4
 8002668:	80fb      	strh	r3, [r7, #6]
 800266a:	4603      	mov	r3, r0
 800266c:	80bb      	strh	r3, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	807b      	strh	r3, [r7, #2]
 8002672:	4613      	mov	r3, r2
 8002674:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002676:	2200      	movs	r2, #0
 8002678:	2110      	movs	r1, #16
 800267a:	485d      	ldr	r0, [pc, #372]	; (80027f0 <ST7789_DrawFilledTriangle+0x198>)
 800267c:	f7fe fc08 	bl	8000e90 <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8002680:	2300      	movs	r3, #0
 8002682:	823b      	strh	r3, [r7, #16]
 8002684:	2300      	movs	r3, #0
 8002686:	81fb      	strh	r3, [r7, #14]
 8002688:	2300      	movs	r3, #0
 800268a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800268c:	2300      	movs	r3, #0
 800268e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002690:	2300      	movs	r3, #0
 8002692:	847b      	strh	r3, [r7, #34]	; 0x22
 8002694:	2300      	movs	r3, #0
 8002696:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8002698:	2300      	movs	r3, #0
 800269a:	83fb      	strh	r3, [r7, #30]
 800269c:	2300      	movs	r3, #0
 800269e:	83bb      	strh	r3, [r7, #28]
 80026a0:	2300      	movs	r3, #0
 80026a2:	837b      	strh	r3, [r7, #26]
 80026a4:	2300      	movs	r3, #0
 80026a6:	833b      	strh	r3, [r7, #24]
 80026a8:	2300      	movs	r3, #0
 80026aa:	82fb      	strh	r3, [r7, #22]
 80026ac:	2300      	movs	r3, #0
 80026ae:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfb8      	it	lt
 80026be:	425b      	neglt	r3, r3
 80026c0:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80026c2:	883a      	ldrh	r2, [r7, #0]
 80026c4:	88bb      	ldrh	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bfb8      	it	lt
 80026cc:	425b      	neglt	r3, r3
 80026ce:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d304      	bcc.n	80026ea <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 80026e0:	2301      	movs	r3, #1
 80026e2:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	843b      	strh	r3, [r7, #32]
 80026e8:	e005      	b.n	80026f6 <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 80026ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ee:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80026f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f4:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 80026f6:	883a      	ldrh	r2, [r7, #0]
 80026f8:	88bb      	ldrh	r3, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d304      	bcc.n	8002708 <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	83bb      	strh	r3, [r7, #28]
 8002706:	e005      	b.n	8002714 <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 8002708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800270c:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800270e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002712:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 8002714:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800271c:	429a      	cmp	r2, r3
 800271e:	db10      	blt.n	8002742 <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8002728:	8a3b      	ldrh	r3, [r7, #16]
 800272a:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 800272c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002730:	0fda      	lsrs	r2, r3, #31
 8002732:	4413      	add	r3, r2
 8002734:	105b      	asrs	r3, r3, #1
 8002736:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8002738:	89fb      	ldrh	r3, [r7, #14]
 800273a:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 800273c:	8a3b      	ldrh	r3, [r7, #16]
 800273e:	82bb      	strh	r3, [r7, #20]
 8002740:	e00f      	b.n	8002762 <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 800274e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002752:	0fda      	lsrs	r2, r3, #31
 8002754:	4413      	add	r3, r2
 8002756:	105b      	asrs	r3, r3, #1
 8002758:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 800275a:	8a3b      	ldrh	r3, [r7, #16]
 800275c:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8002762:	2300      	movs	r3, #0
 8002764:	827b      	strh	r3, [r7, #18]
 8002766:	e033      	b.n	80027d0 <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8002768:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800276a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800276c:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800276e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002770:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	4623      	mov	r3, r4
 8002778:	f7ff fc04 	bl	8001f84 <ST7789_DrawLine>

		num += numadd;
 800277c:	8b3a      	ldrh	r2, [r7, #24]
 800277e:	8afb      	ldrh	r3, [r7, #22]
 8002780:	4413      	add	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8002786:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800278a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800278e:	429a      	cmp	r2, r3
 8002790:	db0e      	blt.n	80027b0 <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 8002792:	8b3a      	ldrh	r2, [r7, #24]
 8002794:	8b7b      	ldrh	r3, [r7, #26]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b29b      	uxth	r3, r3
 800279a:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 800279c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800279e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027a0:	4413      	add	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80027a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027a8:	8bfb      	ldrh	r3, [r7, #30]
 80027aa:	4413      	add	r3, r2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 80027b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80027b2:	8c3b      	ldrh	r3, [r7, #32]
 80027b4:	4413      	add	r3, r2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80027ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027bc:	8bbb      	ldrh	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80027c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	827b      	strh	r3, [r7, #18]
 80027d0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	ddc5      	ble.n	8002768 <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 80027dc:	2201      	movs	r2, #1
 80027de:	2110      	movs	r1, #16
 80027e0:	4803      	ldr	r0, [pc, #12]	; (80027f0 <ST7789_DrawFilledTriangle+0x198>)
 80027e2:	f7fe fb55 	bl	8000e90 <HAL_GPIO_WritePin>
}
 80027e6:	bf00      	nop
 80027e8:	372c      	adds	r7, #44	; 0x2c
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40020000 	.word	0x40020000

080027f4 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	4604      	mov	r4, r0
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4623      	mov	r3, r4
 8002804:	80fb      	strh	r3, [r7, #6]
 8002806:	4603      	mov	r3, r0
 8002808:	80bb      	strh	r3, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	807b      	strh	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8002812:	2200      	movs	r2, #0
 8002814:	2110      	movs	r1, #16
 8002816:	4869      	ldr	r0, [pc, #420]	; (80029bc <ST7789_DrawFilledCircle+0x1c8>)
 8002818:	f7fe fb3a 	bl	8000e90 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	f1c3 0301 	rsb	r3, r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	461a      	mov	r2, r3
 800282e:	03d2      	lsls	r2, r2, #15
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8002840:	88f8      	ldrh	r0, [r7, #6]
 8002842:	88ba      	ldrh	r2, [r7, #4]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4413      	add	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	883a      	ldrh	r2, [r7, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f7ff fb65 	bl	8001f1c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8002852:	88f8      	ldrh	r0, [r7, #6]
 8002854:	88ba      	ldrh	r2, [r7, #4]
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	b29b      	uxth	r3, r3
 800285c:	883a      	ldrh	r2, [r7, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	f7ff fb5c 	bl	8001f1c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	4413      	add	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	88b9      	ldrh	r1, [r7, #4]
 800286e:	883a      	ldrh	r2, [r7, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fb53 	bl	8001f1c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	b29b      	uxth	r3, r3
 800287e:	88b9      	ldrh	r1, [r7, #4]
 8002880:	883a      	ldrh	r2, [r7, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fb4a 	bl	8001f1c <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b298      	uxth	r0, r3
 8002890:	88b9      	ldrh	r1, [r7, #4]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	4413      	add	r3, r2
 8002898:	b29a      	uxth	r2, r3
 800289a:	88bc      	ldrh	r4, [r7, #4]
 800289c:	883b      	ldrh	r3, [r7, #0]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	4623      	mov	r3, r4
 80028a2:	f7ff fb6f 	bl	8001f84 <ST7789_DrawLine>

	while (x < y) {
 80028a6:	e079      	b.n	800299c <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 80028a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0e      	blt.n	80028ce <ST7789_DrawFilledCircle+0xda>
			y--;
 80028b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80028bc:	8a7b      	ldrh	r3, [r7, #18]
 80028be:	3302      	adds	r3, #2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80028c4:	8afa      	ldrh	r2, [r7, #22]
 80028c6:	8a7b      	ldrh	r3, [r7, #18]
 80028c8:	4413      	add	r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80028ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80028da:	8abb      	ldrh	r3, [r7, #20]
 80028dc:	3302      	adds	r3, #2
 80028de:	b29b      	uxth	r3, r3
 80028e0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80028e2:	8afa      	ldrh	r2, [r7, #22]
 80028e4:	8abb      	ldrh	r3, [r7, #20]
 80028e6:	4413      	add	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	8a3b      	ldrh	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	b298      	uxth	r0, r3
 80028f4:	88ba      	ldrh	r2, [r7, #4]
 80028f6:	89fb      	ldrh	r3, [r7, #14]
 80028f8:	4413      	add	r3, r2
 80028fa:	b299      	uxth	r1, r3
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	8a3b      	ldrh	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	b29c      	uxth	r4, r3
 8002904:	88ba      	ldrh	r2, [r7, #4]
 8002906:	89fb      	ldrh	r3, [r7, #14]
 8002908:	4413      	add	r3, r2
 800290a:	b29a      	uxth	r2, r3
 800290c:	883b      	ldrh	r3, [r7, #0]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	4622      	mov	r2, r4
 8002914:	f7ff fb36 	bl	8001f84 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	8a3b      	ldrh	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	b298      	uxth	r0, r3
 8002920:	88ba      	ldrh	r2, [r7, #4]
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	b299      	uxth	r1, r3
 8002928:	88fa      	ldrh	r2, [r7, #6]
 800292a:	8a3b      	ldrh	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	b29c      	uxth	r4, r3
 8002930:	88ba      	ldrh	r2, [r7, #4]
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	b29a      	uxth	r2, r3
 8002938:	883b      	ldrh	r3, [r7, #0]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	4622      	mov	r2, r4
 8002940:	f7ff fb20 	bl	8001f84 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	4413      	add	r3, r2
 800294a:	b298      	uxth	r0, r3
 800294c:	88ba      	ldrh	r2, [r7, #4]
 800294e:	8a3b      	ldrh	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	b299      	uxth	r1, r3
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	b29c      	uxth	r4, r3
 800295c:	88ba      	ldrh	r2, [r7, #4]
 800295e:	8a3b      	ldrh	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	b29a      	uxth	r2, r3
 8002964:	883b      	ldrh	r3, [r7, #0]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	4622      	mov	r2, r4
 800296c:	f7ff fb0a 	bl	8001f84 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8002970:	88fa      	ldrh	r2, [r7, #6]
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	4413      	add	r3, r2
 8002976:	b298      	uxth	r0, r3
 8002978:	88ba      	ldrh	r2, [r7, #4]
 800297a:	8a3b      	ldrh	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	b299      	uxth	r1, r3
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	89fb      	ldrh	r3, [r7, #14]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	b29c      	uxth	r4, r3
 8002988:	88ba      	ldrh	r2, [r7, #4]
 800298a:	8a3b      	ldrh	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	b29a      	uxth	r2, r3
 8002990:	883b      	ldrh	r3, [r7, #0]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	4622      	mov	r2, r4
 8002998:	f7ff faf4 	bl	8001f84 <ST7789_DrawLine>
	while (x < y) {
 800299c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f6ff af7f 	blt.w	80028a8 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 80029aa:	2201      	movs	r2, #1
 80029ac:	2110      	movs	r1, #16
 80029ae:	4803      	ldr	r0, [pc, #12]	; (80029bc <ST7789_DrawFilledCircle+0x1c8>)
 80029b0:	f7fe fa6e 	bl	8000e90 <HAL_GPIO_WritePin>
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	40020000 	.word	0x40020000

080029c0 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 80029c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029ca:	f7ff fa6b 	bl	8001ea4 <ST7789_Fill_Color>
	HAL_Delay(1000);
 80029ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029d2:	f7fd ffbb 	bl	800094c <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 80029d6:	4bc4      	ldr	r3, [pc, #784]	; (8002ce8 <ST7789_Test+0x328>)
 80029d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029dc:	9202      	str	r2, [sp, #8]
 80029de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029e2:	9201      	str	r2, [sp, #4]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4ac0      	ldr	r2, [pc, #768]	; (8002cec <ST7789_Test+0x32c>)
 80029ec:	2114      	movs	r1, #20
 80029ee:	200a      	movs	r0, #10
 80029f0:	f7ff fd4e 	bl	8002490 <ST7789_WriteString>
	HAL_Delay(1000);
 80029f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029f8:	f7fd ffa8 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 80029fc:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002a00:	f7ff fa50 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a08:	f7fd ffa0 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(RED);
 8002a0c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002a10:	f7ff fa48 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a18:	f7fd ff98 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 8002a1c:	201f      	movs	r0, #31
 8002a1e:	f7ff fa41 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a26:	f7fd ff91 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 8002a2a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002a2e:	f7ff fa39 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a36:	f7fd ff89 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 8002a3a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002a3e:	f7ff fa31 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a46:	f7fd ff81 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 8002a4a:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8002a4e:	f7ff fa29 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a56:	f7fd ff79 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 8002a5a:	f240 10cf 	movw	r0, #463	; 0x1cf
 8002a5e:	f7ff fa21 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a66:	f7fd ff71 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 8002a6a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8002a6e:	f7ff fa19 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a76:	f7fd ff69 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 8002a7a:	f248 401f 	movw	r0, #33823	; 0x841f
 8002a7e:	f7ff fa11 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a86:	f7fd ff61 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 8002a8a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002a8e:	f7ff fa09 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a96:	f7fd ff59 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 8002a9a:	f642 3012 	movw	r0, #11026	; 0x2b12
 8002a9e:	f7ff fa01 	bl	8001ea4 <ST7789_Fill_Color>
    HAL_Delay(500);
 8002aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aa6:	f7fd ff51 	bl	800094c <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 8002aaa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002aae:	f7ff f9f9 	bl	8001ea4 <ST7789_Fill_Color>
	HAL_Delay(500);
 8002ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ab6:	f7fd ff49 	bl	800094c <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 8002aba:	4b8d      	ldr	r3, [pc, #564]	; (8002cf0 <ST7789_Test+0x330>)
 8002abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac0:	9202      	str	r2, [sp, #8]
 8002ac2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ac6:	9201      	str	r2, [sp, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	9200      	str	r2, [sp, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a89      	ldr	r2, [pc, #548]	; (8002cf4 <ST7789_Test+0x334>)
 8002ad0:	210a      	movs	r1, #10
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f7ff fcdc 	bl	8002490 <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 8002ad8:	4b87      	ldr	r3, [pc, #540]	; (8002cf8 <ST7789_Test+0x338>)
 8002ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ade:	9202      	str	r2, [sp, #8]
 8002ae0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002ae4:	9201      	str	r2, [sp, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	9200      	str	r2, [sp, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a83      	ldr	r2, [pc, #524]	; (8002cfc <ST7789_Test+0x33c>)
 8002aee:	2132      	movs	r1, #50	; 0x32
 8002af0:	200a      	movs	r0, #10
 8002af2:	f7ff fccd 	bl	8002490 <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 8002af6:	4b7c      	ldr	r3, [pc, #496]	; (8002ce8 <ST7789_Test+0x328>)
 8002af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afc:	9202      	str	r2, [sp, #8]
 8002afe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b02:	9201      	str	r2, [sp, #4]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	9200      	str	r2, [sp, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <ST7789_Test+0x33c>)
 8002b0c:	214b      	movs	r1, #75	; 0x4b
 8002b0e:	200a      	movs	r0, #10
 8002b10:	f7ff fcbe 	bl	8002490 <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 8002b14:	4b76      	ldr	r3, [pc, #472]	; (8002cf0 <ST7789_Test+0x330>)
 8002b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b1a:	9202      	str	r2, [sp, #8]
 8002b1c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002b20:	9201      	str	r2, [sp, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	9200      	str	r2, [sp, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a74      	ldr	r2, [pc, #464]	; (8002cfc <ST7789_Test+0x33c>)
 8002b2a:	2164      	movs	r1, #100	; 0x64
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f7ff fcaf 	bl	8002490 <ST7789_WriteString>
	HAL_Delay(1000);
 8002b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b36:	f7fd ff09 	bl	800094c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8002b3a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002b3e:	f7ff f9b1 	bl	8001ea4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, RED);
 8002b42:	4b69      	ldr	r3, [pc, #420]	; (8002ce8 <ST7789_Test+0x328>)
 8002b44:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b4e:	9201      	str	r2, [sp, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	9200      	str	r2, [sp, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6a      	ldr	r2, [pc, #424]	; (8002d00 <ST7789_Test+0x340>)
 8002b58:	210a      	movs	r1, #10
 8002b5a:	200a      	movs	r0, #10
 8002b5c:	f7ff fc98 	bl	8002490 <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 8002b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2364      	movs	r3, #100	; 0x64
 8002b68:	2264      	movs	r2, #100	; 0x64
 8002b6a:	211e      	movs	r1, #30
 8002b6c:	201e      	movs	r0, #30
 8002b6e:	f7ff fa95 	bl	800209c <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8002b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b76:	f7fd fee9 	bl	800094c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8002b7a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002b7e:	f7ff f991 	bl	8001ea4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, RED);
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <ST7789_Test+0x328>)
 8002b84:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b88:	9202      	str	r2, [sp, #8]
 8002b8a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b8e:	9201      	str	r2, [sp, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	9200      	str	r2, [sp, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5b      	ldr	r2, [pc, #364]	; (8002d04 <ST7789_Test+0x344>)
 8002b98:	210a      	movs	r1, #10
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	f7ff fc78 	bl	8002490 <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 8002ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2332      	movs	r3, #50	; 0x32
 8002ba8:	2232      	movs	r2, #50	; 0x32
 8002baa:	211e      	movs	r1, #30
 8002bac:	201e      	movs	r0, #30
 8002bae:	f7ff fcc1 	bl	8002534 <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 8002bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bb6:	f7fd fec9 	bl	800094c <HAL_Delay>


	ST7789_Fill_Color(RED);
 8002bba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002bbe:	f7ff f971 	bl	8001ea4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, RED);
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <ST7789_Test+0x328>)
 8002bc4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002bc8:	9202      	str	r2, [sp, #8]
 8002bca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002bce:	9201      	str	r2, [sp, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	9200      	str	r2, [sp, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4c      	ldr	r2, [pc, #304]	; (8002d08 <ST7789_Test+0x348>)
 8002bd8:	210a      	movs	r1, #10
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f7ff fc58 	bl	8002490 <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 8002be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be4:	2219      	movs	r2, #25
 8002be6:	213c      	movs	r1, #60	; 0x3c
 8002be8:	203c      	movs	r0, #60	; 0x3c
 8002bea:	f7ff fa9b 	bl	8002124 <ST7789_DrawCircle>
	HAL_Delay(1000);
 8002bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bf2:	f7fd feab 	bl	800094c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8002bf6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002bfa:	f7ff f953 	bl	8001ea4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, RED);
 8002bfe:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <ST7789_Test+0x328>)
 8002c00:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002c0a:	9201      	str	r2, [sp, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	9200      	str	r2, [sp, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3e      	ldr	r2, [pc, #248]	; (8002d0c <ST7789_Test+0x34c>)
 8002c14:	210a      	movs	r1, #10
 8002c16:	200a      	movs	r0, #10
 8002c18:	f7ff fc3a 	bl	8002490 <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 8002c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c20:	2219      	movs	r2, #25
 8002c22:	213c      	movs	r1, #60	; 0x3c
 8002c24:	203c      	movs	r0, #60	; 0x3c
 8002c26:	f7ff fde5 	bl	80027f4 <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 8002c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c2e:	f7fd fe8d 	bl	800094c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8002c32:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002c36:	f7ff f935 	bl	8001ea4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, RED);
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <ST7789_Test+0x328>)
 8002c3c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c40:	9202      	str	r2, [sp, #8]
 8002c42:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002c46:	9201      	str	r2, [sp, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	9200      	str	r2, [sp, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <ST7789_Test+0x350>)
 8002c50:	210a      	movs	r1, #10
 8002c52:	200a      	movs	r0, #10
 8002c54:	f7ff fc1c 	bl	8002490 <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8002c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c5c:	9302      	str	r3, [sp, #8]
 8002c5e:	2328      	movs	r3, #40	; 0x28
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	233c      	movs	r3, #60	; 0x3c
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2346      	movs	r3, #70	; 0x46
 8002c68:	221e      	movs	r2, #30
 8002c6a:	211e      	movs	r1, #30
 8002c6c:	201e      	movs	r0, #30
 8002c6e:	f7ff fcb9 	bl	80025e4 <ST7789_DrawTriangle>
	HAL_Delay(1000);
 8002c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c76:	f7fd fe69 	bl	800094c <HAL_Delay>

	ST7789_Fill_Color(RED);
 8002c7a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002c7e:	f7ff f911 	bl	8001ea4 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, RED);
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <ST7789_Test+0x328>)
 8002c84:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c88:	9202      	str	r2, [sp, #8]
 8002c8a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002c8e:	9201      	str	r2, [sp, #4]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	9200      	str	r2, [sp, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <ST7789_Test+0x354>)
 8002c98:	210a      	movs	r1, #10
 8002c9a:	200a      	movs	r0, #10
 8002c9c:	f7ff fbf8 	bl	8002490 <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8002ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca4:	9302      	str	r3, [sp, #8]
 8002ca6:	2328      	movs	r3, #40	; 0x28
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	233c      	movs	r3, #60	; 0x3c
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2346      	movs	r3, #70	; 0x46
 8002cb0:	221e      	movs	r2, #30
 8002cb2:	211e      	movs	r1, #30
 8002cb4:	201e      	movs	r0, #30
 8002cb6:	f7ff fccf 	bl	8002658 <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 8002cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cbe:	f7fd fe45 	bl	800094c <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 8002cc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cc6:	f7ff f8ed 	bl	8001ea4 <ST7789_Fill_Color>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <ST7789_Test+0x358>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7ff fb0b 	bl	80022f0 <ST7789_DrawImage>
	HAL_Delay(3000);
 8002cda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cde:	f7fd fe35 	bl	800094c <HAL_Delay>
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000014 	.word	0x20000014
 8002cec:	08002db4 	.word	0x08002db4
 8002cf0:	2000001c 	.word	0x2000001c
 8002cf4:	08002dc0 	.word	0x08002dc0
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	08002dcc 	.word	0x08002dcc
 8002d00:	08002ddc 	.word	0x08002ddc
 8002d04:	08002de8 	.word	0x08002de8
 8002d08:	08002df8 	.word	0x08002df8
 8002d0c:	08002e00 	.word	0x08002e00
 8002d10:	08002e0c 	.word	0x08002e0c
 8002d14:	08002e18 	.word	0x08002e18
 8002d18:	08005648 	.word	0x08005648

08002d1c <__libc_init_array>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	4e0d      	ldr	r6, [pc, #52]	; (8002d54 <__libc_init_array+0x38>)
 8002d20:	4c0d      	ldr	r4, [pc, #52]	; (8002d58 <__libc_init_array+0x3c>)
 8002d22:	1ba4      	subs	r4, r4, r6
 8002d24:	10a4      	asrs	r4, r4, #2
 8002d26:	2500      	movs	r5, #0
 8002d28:	42a5      	cmp	r5, r4
 8002d2a:	d109      	bne.n	8002d40 <__libc_init_array+0x24>
 8002d2c:	4e0b      	ldr	r6, [pc, #44]	; (8002d5c <__libc_init_array+0x40>)
 8002d2e:	4c0c      	ldr	r4, [pc, #48]	; (8002d60 <__libc_init_array+0x44>)
 8002d30:	f000 f820 	bl	8002d74 <_init>
 8002d34:	1ba4      	subs	r4, r4, r6
 8002d36:	10a4      	asrs	r4, r4, #2
 8002d38:	2500      	movs	r5, #0
 8002d3a:	42a5      	cmp	r5, r4
 8002d3c:	d105      	bne.n	8002d4a <__libc_init_array+0x2e>
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d44:	4798      	blx	r3
 8002d46:	3501      	adds	r5, #1
 8002d48:	e7ee      	b.n	8002d28 <__libc_init_array+0xc>
 8002d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d4e:	4798      	blx	r3
 8002d50:	3501      	adds	r5, #1
 8002d52:	e7f2      	b.n	8002d3a <__libc_init_array+0x1e>
 8002d54:	0800d650 	.word	0x0800d650
 8002d58:	0800d650 	.word	0x0800d650
 8002d5c:	0800d650 	.word	0x0800d650
 8002d60:	0800d654 	.word	0x0800d654

08002d64 <memset>:
 8002d64:	4402      	add	r2, r0
 8002d66:	4603      	mov	r3, r0
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <memset+0xa>
 8002d6c:	4770      	bx	lr
 8002d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d72:	e7f9      	b.n	8002d68 <memset+0x4>

08002d74 <_init>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr

08002d80 <_fini>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr
